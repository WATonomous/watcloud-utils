import json
import os
import logging
from enum import Enum

class Vars(str, Enum):
    SENTRY_DSN = "SENTRY_DSN"
    SENTRY_RELEASE = "SENTRY_RELEASE"
    BUILD_INFO = "BUILD_INFO"
    DEPLOYMENT_ENVIRONMENT = "DEPLOYMENT_ENVIRONMENT"

# This cache is for warning only once if a variable is missing.
var_cache = {}
def getvar(key: Vars, warn_if_missing: bool = True, logger=logging.getLogger(__name__)) -> str:
    if key in var_cache:
        return var_cache[key]
    
    if key == Vars.BUILD_INFO:
        # DOCKER_METADATA_OUTPUT_JSON is generated by the build pipeline (e.g. docker/metadata-action).
        # Example:
        # {
        #     "tags": ["ghcr.io/watonomous/repo-ingestion:main"],
        #     "labels": {
        #         "org.opencontainers.image.title": "repo-ingestion",
        #         "org.opencontainers.image.description": "Simple server to receive file changes and open GitHub pull requests",
        #         "org.opencontainers.image.url": "https://github.com/WATonomous/repo-ingestion",
        #         "org.opencontainers.image.source": "https://github.com/WATonomous/repo-ingestion",
        #         "org.opencontainers.image.version": "main",
        #         "org.opencontainers.image.created": "2024-01-20T16:10:39.421Z",
        #         "org.opencontainers.image.revision": "1d55b62b15c78251e0560af9e97927591e260a98",
        #         "org.opencontainers.image.licenses": "",
        #     },
        # }
        BUILD_INFO_ENV_VAR = "DOCKER_METADATA_OUTPUT_JSON"
        val = os.getenv(BUILD_INFO_ENV_VAR)
        if not val:
            if warn_if_missing:
                logger.warning(f"Environment variable {BUILD_INFO_ENV_VAR} not found.")
            ret = None
            var_cache[key] = ret
            return ret

        try:
            ret = json.loads(val)
        except json.JSONDecodeError:
            if warn_if_missing:
                logger.warning(f"Failed to parse environment variable {BUILD_INFO_ENV_VAR}.")
            ret = {}
        
        var_cache[key] = ret
        return ret

    # Generic environment variable
    ret = os.getenv(key.value)
    if not ret and warn_if_missing:
        logger.warning(f"Environment variable {key.value} not found.")

    var_cache[key] = ret
    return ret